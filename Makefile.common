TOPDIR=$(dir $(lastword $(MAKEFILE_LIST)))
IMAGE_FILE?=image.yaml
IMAGE_VERSION?=dev
REPO?=$(shell cat $(IMAGE_FILE) | grep "^name:" | cut -d' ' -f2)
VERSION?=$(shell cat $(IMAGE_FILE) | grep "^version:" | cut -d ' ' -f2)
DOCKER_BUILD_OPTS?=
DOCKER?=docker
PRODUCT_DIR?=../../enmasse

CEKIT_BUILD_ENGINE?=docker
ifeq ($(TECH_PREVIEW),true)
	CEKIT_BASE_ARGS=--build-tech-preview
endif

NEW_ARTIFACT= $(shell echo $(LOCAL_ARTIFACT_DIR) | rev| cut -d '/' -f 1 |sed 's/\([^0-9]*[\.]\).*[0-9][-]\(.*\)/\1\2/' |rev)
ARTIFACT_CACHE_DIR?="target/image"
ABSOLUTE_LOCAL_ARTIFACT_DIR?=$(CURDIR)/$(PRODUCT_DIR)/$(LOCAL_ARTIFACT_DIR)
NEW_ABSOLUTE_LOCAL_ARTIFACT?=$(ARTIFACT_CACHE_DIR)/$(NEW_ARTIFACT)

all: build 
	echo "Running docker rhel build $(REPO)"
	cekit --descriptor $(IMAGE_FILE) build $(CEKIT_BUILD_ARGS) $(CEKIT_BUILD_ENGINE) $(CEKIT_ENGINE_ARGS) $(CEKIT_BASE_ARGS) 

generate:
	if [ -f image-template.yaml ]; then RELEASE_VERSION=$(RELEASE_VERSION) ARTIFACT=$(ARTIFACT) ARTIFACT_MD5=$(ARTIFACT_MD5) envsubst < image-template.yaml > image.yaml; fi

tag:
	$(DOCKER) tag $(REPO):$(VERSION) $(REPO):$(IMAGE_VERSION)
	$(DOCKER) tag $(REPO):$(VERSION) $(DOCKER_REGISTRY)/$(REPO):$(IMAGE_VERSION)

push:
	bash $(TOPDIR)/scripts/retry.sh "$(DOCKER) push $(DOCKER_REGISTRY)/$(REPO):$(IMAGE_VERSION)" 10 10

copyartifact:
	echo "Copying local artifacts from $(ABSOLUTE_LOCAL_ARTIFACT_DIR) TO $(NEW_ABSOLUTE_LOCAL_ARTIFACT)"
	mkdir -p $(ARTIFACT_CACHE_DIR)
	cp $(ABSOLUTE_LOCAL_ARTIFACT_DIR) $(NEW_ABSOLUTE_LOCAL_ARTIFACT)

clean:
	rm -rf build target

.PHONY: all push tag clean generate
