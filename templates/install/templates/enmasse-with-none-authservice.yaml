apiVersion: v1
kind: Template
metadata:
  name: enmasse-with-none-authservice
parameters:
- name: NAMESPACE
  description: Namespace where EnMasse should be deployed
  required: true
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: enmasse
    name: address-space-definitions
  data:
    standard-space-infra-without-mqtt.yaml: |-
      apiVersion: v1
      kind: Template
      metadata:
        labels:
          app: enmasse
        name: standard-space-infra-without-mqtt
      objects:
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/service-port.amqp: 5672
            enmasse.io/service-port.amqps: 5671
            enmasse.io/service-port.amqp-wss: 443
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: messaging-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            protocol: TCP
            targetPort: 5672
          - name: amqps
            port: 5671
            protocol: TCP
            targetPort: 5671
          - name: amqps-normal
            port: 55671
            protocol: TCP
            targetPort: amqps-normal
          - name: amqps-broker
            port: 56671
            protocol: TCP
            targetPort: amqps-broker
          - name: inter-router
            port: 55672
            protocol: TCP
            targetPort: 55672
          - name: https
            port: 443
            protocol: TCP
            targetPort: 8443
          selector:
            capability: router
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: qdrouterd-config.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
        data:
          qdrouterd.conf: |-
            router {
              mode: interior
              id: ${HOSTNAME}
              defaultDistribution: unavailable
              allowResumableLinkRoute: false
            }
  
            sslProfile {
              name: auth_service_ssl
              certDb: /etc/qpid-dispatch/authservice-ca/tls.crt
            }
  
            authServicePlugin {
              name: auth_service
              authService: ${AUTHENTICATION_SERVICE_HOST}:${AUTHENTICATION_SERVICE_PORT}
              saslInitHostname: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
              authSslProfile: auth_service_ssl
            }
  
            listener {
              host: 0.0.0.0
              port: 5672
              saslPlugin: auth_service
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 55672
              role: inter-router
              authenticatePeer: yes
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 8443
              saslPlugin: auth_service
              sslProfile: ssl_details
              http: true
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            sslProfile {
              name: ssl_details
              certFile: /etc/qpid-dispatch/ssl/tls.crt
              keyFile: /etc/qpid-dispatch/ssl/tls.key
            }
  
            listener {
              host: 0.0.0.0
              port: 5671
              saslPlugin: auth_service
              sslProfile: ssl_details
              requireSsl: true
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            sslProfile {
              name: inter_router_tls
              certFile: /etc/enmasse-certs/tls.crt
              keyFile: /etc/enmasse-certs/tls.key
              certDb: /etc/enmasse-certs/ca.crt
            }
  
            listener {
              host: 0.0.0.0
              port: 55671
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 56671
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              role: route-container
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            connector {
              host: ragent-${INFRA_UUID}
              port: 5671
              sslProfile: inter_router_tls
              verifyHostName: no
            }
  
            linkRoute {
              name: override.lwt_in
              prefix: $lwt
              direction: in
              containerId: lwt-service
            }
  
            linkRoute {
              name: override.lwt_out
              prefix: $lwt
              direction: out
              containerId: lwt-service
            }
  
            address {
              name: override.mqtt
              prefix: $mqtt
              distribution: balanced
            }
  
            address {
              name: override.subctrl
              prefix: $subctrl
              distribution: balanced
            }
  
            address {
              name: override.temp
              prefix: $temp
              distribution: balanced
            }
      - apiVersion: apps/v1beta1
        kind: StatefulSet
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-cn: router.${INFRA_UUID}
            enmasse.io/cert-secret: router-internal-cert.${INFRA_UUID}
            prometheus.io/path: /metrics
            prometheus.io/port: '8080'
            prometheus.io/scrape: 'true'
          labels:
            app: enmasse
            name: qdrouterd
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: qdrouterd-${INFRA_UUID}
        spec:
          serviceName: qdrouterd-headless-${INFRA_UUID}
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                capability: router
                name: qdrouterd
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: QDROUTERD_CONF
                  value: "/etc/qpid-dispatch/config/qdrouterd.conf"
                - name: QDROUTERD_AUTO_MESH_DISCOVERY
                  value: "INFER"
                - name: QDROUTERD_AUTO_MESH_SERVICE_NAME
                  value: "qdrouterd-headless-${INFRA_UUID}"
                image: docker.io/enmasseproject/router:0.23.0
                livenessProbe:
                  initialDelaySeconds: 60
                  tcpSocket:
                    port: amqp
                name: router
                ports:
                - containerPort: 5672
                  name: amqp
                  protocol: TCP
                - containerPort: 5671
                  name: amqps
                  protocol: TCP
                - containerPort: 8443
                  name: https
                  protocol: TCP
                - containerPort: 55671
                  name: amqps-normal
                  protocol: TCP
                - containerPort: 56671
                  name: amqps-broker
                  protocol: TCP
                volumeMounts:
                - mountPath: /etc/qpid-dispatch/ssl
                  name: ssl-certs
                  readOnly: true
                - mountPath: /etc/qpid-dispatch/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/enmasse-certs
                  name: router-internal-cert
                  readOnly: true
                - mountPath: /etc/qpid-dispatch/config
                  name: qdrouterd-config
              volumes:
              - name: ssl-certs
                secret:
                  secretName: ${MESSAGING_SECRET}
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: router-internal-cert
                secret:
                  secretName: router-internal-cert.${INFRA_UUID}
              - name: qdrouterd-config
                configMap:
                  name: qdrouterd-config.${INFRA_UUID}
      - apiVersion: v1
        data:
          tls.crt: ${AUTHENTICATION_SERVICE_CA_CERT}
        kind: Secret
        metadata:
          name: authservice-ca.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: admin-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            name: admin
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: admin.${INFRA_UUID}
        spec:
          replicas: 1
          strategy:
            type: Recreate
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                name: admin
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: TEMPLATE_DIR
                  value: /broker-templates
                - name: ADDRESS_SPACE
                  value: ${ADDRESS_SPACE}
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ADDRESS_SPACE_PLAN
                  value: ${ADDRESS_SPACE_PLAN}
                - name: RESYNC_INTERVAL
                  value: ${CONTROLLER_RESYNC_INTERVAL}
                - name: CHECK_INTERVAL
                  value: ${CONTROLLER_CHECK_INTERVAL}
                - name: EVENT_QUEUE_SIZE
                  value: ${CONTROLLER_EVENT_QUEUE_SIZE}
                - name: ENABLE_EVENT_LOGGER
                  value: ${ENABLE_EVENT_LOGGER}
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CA_SECRET
                  value: authservice-ca
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: JAVA_OPTS
                  value: -verbose:gc
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: MESSAGING_SECRET
                  value: ${MESSAGING_SECRET}
                image: rh-amqmaas-1/amqmaas10-standard-controller-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /health
                    port: http
                    scheme: HTTP
                  initialDelaySeconds: 30
                name: standard-controller
                ports:
                - containerPort: 8889
                  name: http
                readinessProbe:
                  httpGet:
                    path: /health
                    port: http
                    scheme: HTTP
                  initialDelaySeconds: 30
                resources:
                  limits:
                    memory: 512Mi
                  requests:
                    memory: 512Mi
                volumeMounts:
                - mountPath: /etc/enmasse-certs
                  name: admin-internal-cert
                  readOnly: true
                - mountPath: /broker-templates
                  name: broker-templates
                  readOnly: true
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ADDRESS_SPACE_PLAN
                  value: ${ADDRESS_SPACE_PLAN}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CA_SECRET
                  value: authservice-ca
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                - name: AUTHENTICATION_SERVICE_KC_IDP_HINT
                  value: ${AUTHENTICATION_SERVICE_KC_IDP_HINT}
                - name: ADDRESS_SPACE
                  value: ${ADDRESS_SPACE}
                - name: ADDRESS_SPACE_NAMESPACE
                  value: ${ADDRESS_SPACE_NAMESPACE}
                - name: MESSAGING_CERT
                  value: /opt/agent/messaging-cert/tls.crt
                image: rh-amqmaas-1/amqmaas10-agent-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                name: agent
                ports:
                - containerPort: 8888
                  name: http
                - containerPort: 8080
                  name: https
                - containerPort: 56720
                  name: amqp-ws
                readinessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                resources:
                  limits:
                    memory: 512Mi
                  requests:
                    memory: 128Mi
                volumeMounts:
                - mountPath: /etc/console-certs
                  name: console-secret
                  readOnly: true
                - mountPath: /opt/agent/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/enmasse-certs
                  name: admin-internal-cert
                  readOnly: true
                - mountPath: /opt/agent/messaging-cert
                  name: messaging-cert
                  readOnly: true
              serviceAccount: ${ADDRESS_SPACE_ADMIN_SA}
              volumes:
              - name: console-secret
                secret:
                  secretName: ${CONSOLE_SECRET}
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: admin-internal-cert
                secret:
                  secretName: admin-internal-cert.${INFRA_UUID}
              - name: messaging-cert
                secret:
                  secretName: ${MESSAGING_SECRET}
              - name: broker-templates
                configMap:
                  name: standard-broker-definitions
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: qdrouterd-headless-${INFRA_UUID}
        spec:
          clusterIP: None
          ports:
          - name: inter-router
            port: 55672
            targetPort: 55672
          selector:
            capability: router
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ragent-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5671
            targetPort: 55671
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: queue-scheduler-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            targetPort: 55671
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: console-${INFRA_UUID}
        spec:
          ports:
          - name: https
            port: 8081
            targetPort: 8080
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      parameters:
      - name: INFRA_UUID
        description: UUID to use for infrastructure
        required: true
      - name: ADDRESS_SPACE_PLAN
        description: Name of address space plan followed
        required: true
      - description: The link capacity setting for router
        name: ROUTER_LINK_CAPACITY
        value: '250'
      - description: The hostname to use for the exposed route for messaging
        name: MESSAGING_HOSTNAME
      - description: The hostname to use for the exposed route for MQTT
        name: MQTT_GATEWAY_HOSTNAME
      - description: The hostname to use for the exposed route for the messaging console
        name: CONSOLE_HOSTNAME
      - description: The secret with cert for the console
        name: CONSOLE_SECRET
        required: true
      - description: The secret with cert for the messaging service
        name: MESSAGING_SECRET
        required: true
      - description: The secret to mount for MQTT private key and certificate
        name: MQTT_SECRET
        required: true
      - description: The name of our address space
        name: ADDRESS_SPACE
        required: true
      - description: The namespace of our address space
        name: ADDRESS_SPACE_NAMESPACE
        required: true
      - description: The hostname of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_HOST
        required: true
      - description: The port of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_PORT
        required: true
      - description: The CA cert to use for validating authentication service cert
        name: AUTHENTICATION_SERVICE_CA_CERT
        required: true
      - description: The client cert to use as identity against authentication service
        name: AUTHENTICATION_SERVICE_CLIENT_SECRET
      - description: The hostname to use in sasl init
        name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
      - description: The URL to use for OAUTH (if not set, OAUTH is not used)
        name: AUTHENTICATION_SERVICE_OAUTH_URL
      - description: Name of Keycloak Identification Provider Hint
        name: AUTHENTICATION_SERVICE_KC_IDP_HINT
      - description: Enable logging of kubernetes events
        name: ENABLE_EVENT_LOGGER
        value: 'false'
      - description: Interval (in seconds) to use between controller resync
        name: CONTROLLER_RESYNC_INTERVAL
        value: '600'
      - description: Interval (in seconds) to use between status checks
        name: CONTROLLER_CHECK_INTERVAL
        value: '30'
      - description: Max number of events queued up for controller
        name: CONTROLLER_EVENT_QUEUE_SIZE
        value: '10000'
      - description: The service account with address space admin privileges
        name: ADDRESS_SPACE_ADMIN_SA
        required: true
    standard-space-infra.yaml: |-
      apiVersion: v1
      kind: Template
      metadata:
        labels:
          app: enmasse
        name: standard-space-infra
      objects:
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/service-port.amqp: 5672
            enmasse.io/service-port.amqps: 5671
            enmasse.io/service-port.amqp-wss: 443
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: messaging-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            protocol: TCP
            targetPort: 5672
          - name: https
            port: 443
            protocol: TCP
            targetPort: 8443
          - name: amqps
            port: 5671
            protocol: TCP
            targetPort: 5671
          - name: amqps-normal
            port: 55671
            protocol: TCP
            targetPort: amqps-normal
          - name: amqps-broker
            port: 56671
            protocol: TCP
            targetPort: amqps-broker
          - name: inter-router
            port: 55672
            protocol: TCP
            targetPort: 55672
          selector:
            capability: router
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: subscription-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            protocol: TCP
            targetPort: 5672
          selector:
            name: subserv
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: qdrouterd-config.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
        data:
          qdrouterd.conf: |-
            router {
              mode: interior
              id: ${HOSTNAME}
              defaultDistribution: unavailable
              allowResumableLinkRoute: false
            }
  
            sslProfile {
              name: auth_service_ssl
              certDb: /etc/qpid-dispatch/authservice-ca/tls.crt
            }
  
            authServicePlugin {
              name: auth_service
              authService: ${AUTHENTICATION_SERVICE_HOST}:${AUTHENTICATION_SERVICE_PORT}
              saslInitHostname: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
              authSslProfile: auth_service_ssl
            }
  
            listener {
              host: 0.0.0.0
              port: 5672
              saslPlugin: auth_service
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 55672
              role: inter-router
              authenticatePeer: yes
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 8443
              saslPlugin: auth_service
              sslProfile: ssl_details
              http: true
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            sslProfile {
              name: ssl_details
              certFile: /etc/qpid-dispatch/ssl/tls.crt
              keyFile: /etc/qpid-dispatch/ssl/tls.key
            }
  
            listener {
              host: 0.0.0.0
              port: 5671
              saslPlugin: auth_service
              sslProfile: ssl_details
              requireSsl: true
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            sslProfile {
              name: inter_router_tls
              certFile: /etc/enmasse-certs/tls.crt
              keyFile: /etc/enmasse-certs/tls.key
              certDb: /etc/enmasse-certs/ca.crt
            }
  
            listener {
              host: 0.0.0.0
              port: 55671
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            listener {
              host: 0.0.0.0
              port: 56671
              sslProfile: inter_router_tls
              saslMechanisms: EXTERNAL
              role: route-container
              authenticatePeer: yes
              linkCapacity: ${ROUTER_LINK_CAPACITY}
            }
  
            connector {
              host: ragent-${INFRA_UUID}
              port: 5671
              sslProfile: inter_router_tls
              verifyHostName: no
            }
  
            linkRoute {
              name: override.lwt_in
              prefix: $lwt
              direction: in
              containerId: lwt-service
            }
  
            linkRoute {
              name: override.lwt_out
              prefix: $lwt
              direction: out
              containerId: lwt-service
            }
  
            address {
              name: override.mqtt
              prefix: $mqtt
              distribution: balanced
            }
  
            address {
              name: override.subctrl
              prefix: $subctrl
              distribution: balanced
            }
  
            address {
              name: override.temp
              prefix: $temp
              distribution: balanced
            }
      - apiVersion: apps/v1beta1
        kind: StatefulSet
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-cn: router.${INFRA_UUID}
            enmasse.io/cert-secret: router-internal-cert.${INFRA_UUID}
            prometheus.io/path: /metrics
            prometheus.io/port: '8080'
            prometheus.io/scrape: 'true'
          labels:
            app: enmasse
            name: qdrouterd
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: qdrouterd-${INFRA_UUID}
        spec:
          serviceName: qdrouterd-headless-${INFRA_UUID}
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                capability: router
                name: qdrouterd
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: QDROUTERD_CONF
                  value: "/etc/qpid-dispatch/config/qdrouterd.conf"
                - name: QDROUTERD_AUTO_MESH_DISCOVERY
                  value: "INFER"
                - name: QDROUTERD_AUTO_MESH_SERVICE_NAME
                  value: "qdrouterd-headless-${INFRA_UUID}"
                image: docker.io/enmasseproject/router:0.23.0
                livenessProbe:
                  initialDelaySeconds: 60
                  tcpSocket:
                    port: amqp
                name: router
                ports:
                - containerPort: 5672
                  name: amqp
                  protocol: TCP
                - containerPort: 5671
                  name: amqps
                  protocol: TCP
                - containerPort: 8443
                  name: https
                  protocol: TCP
                - containerPort: 55671
                  name: amqps-normal
                  protocol: TCP
                - containerPort: 56671
                  name: amqps-broker
                  protocol: TCP
                volumeMounts:
                - mountPath: /etc/qpid-dispatch/ssl
                  name: ssl-certs
                  readOnly: true
                - mountPath: /etc/qpid-dispatch/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/enmasse-certs
                  name: router-internal-cert
                  readOnly: true
                - mountPath: /etc/qpid-dispatch/config
                  name: qdrouterd-config
              volumes:
              - name: ssl-certs
                secret:
                  secretName: ${MESSAGING_SECRET}
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: router-internal-cert
                secret:
                  secretName: router-internal-cert.${INFRA_UUID}
              - name: qdrouterd-config
                configMap:
                  name: qdrouterd-config.${INFRA_UUID}
      - apiVersion: v1
        data:
          tls.crt: ${AUTHENTICATION_SERVICE_CA_CERT}
        kind: Secret
        metadata:
          name: authservice-ca.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: admin-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            name: admin
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: admin.${INFRA_UUID}
        spec:
          replicas: 1
          strategy:
            type: Recreate
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                name: admin
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ADDRESS_SPACE_PLAN
                  value: ${ADDRESS_SPACE_PLAN}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: TEMPLATE_DIR
                  value: /broker-templates
                - name: ADDRESS_SPACE
                  value: ${ADDRESS_SPACE}
                - name: RESYNC_INTERVAL
                  value: ${CONTROLLER_RESYNC_INTERVAL}
                - name: CHECK_INTERVAL
                  value: ${CONTROLLER_CHECK_INTERVAL}
                - name: EVENT_QUEUE_SIZE
                  value: ${CONTROLLER_EVENT_QUEUE_SIZE}
                - name: ENABLE_EVENT_LOGGER
                  value: ${ENABLE_EVENT_LOGGER}
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CA_SECRET
                  value: authservice-ca
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: JAVA_OPTS
                  value: -verbose:gc
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: MESSAGING_SECRET
                  value: ${MESSAGING_SECRET}
                image: rh-amqmaas-1/amqmaas10-standard-controller-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /health
                    port: http
                    scheme: HTTP
                  initialDelaySeconds: 30
                name: standard-controller
                ports:
                - containerPort: 8889
                  name: http
                readinessProbe:
                  httpGet:
                    path: /health
                    port: http
                    scheme: HTTP
                  initialDelaySeconds: 30
                resources:
                  limits:
                    memory: 512Mi
                  requests:
                    memory: 512Mi
                volumeMounts:
                - mountPath: /etc/enmasse-certs
                  name: admin-internal-cert
                  readOnly: true
                - mountPath: /broker-templates
                  name: broker-templates
                  readOnly: true
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ADDRESS_SPACE_PLAN
                  value: ${ADDRESS_SPACE_PLAN}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CA_SECRET
                  value: authservice-ca
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                - name: AUTHENTICATION_SERVICE_KC_IDP_HINT
                  value: ${AUTHENTICATION_SERVICE_KC_IDP_HINT}
                - name: ADDRESS_SPACE
                  value: ${ADDRESS_SPACE}
                - name: ADDRESS_SPACE_NAMESPACE
                  value: ${ADDRESS_SPACE_NAMESPACE}
                - name: MESSAGING_CERT
                  value: /opt/agent/messaging-cert/tls.crt
                image: rh-amqmaas-1/amqmaas10-agent-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                name: agent
                ports:
                - containerPort: 8888
                  name: http
                - containerPort: 8080
                  name: https
                - containerPort: 56720
                  name: amqp-ws
                readinessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                  periodSeconds: 30
                  timeoutSeconds: 5
                resources:
                  limits:
                    memory: 512Mi
                  requests:
                    memory: 128Mi
                volumeMounts:
                - mountPath: /etc/console-certs
                  name: console-secret
                  readOnly: true
                - mountPath: /opt/agent/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/enmasse-certs
                  name: admin-internal-cert
                  readOnly: true
                - mountPath: /opt/agent/messaging-cert
                  name: messaging-cert
                  readOnly: true
              serviceAccount: ${ADDRESS_SPACE_ADMIN_SA}
              volumes:
              - name: console-secret
                secret:
                  secretName: ${CONSOLE_SECRET}
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: admin-internal-cert
                secret:
                  secretName: admin-internal-cert.${INFRA_UUID}
              - name: messaging-cert
                secret:
                  secretName: ${MESSAGING_SECRET}
              - name: broker-templates
                configMap:
                  name: standard-broker-definitions
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: qdrouterd-headless-${INFRA_UUID}
        spec:
          clusterIP: None
          ports:
          - name: inter-router
            port: 55672
            targetPort: 55672
          selector:
            capability: router
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ragent-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5671
            targetPort: 55671
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: queue-scheduler-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            targetPort: 55671
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: console-${INFRA_UUID}
        spec:
          ports:
          - name: https
            port: 8081
            targetPort: 8080
          selector:
            name: admin
            infraUuid: ${INFRA_UUID}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: subserv-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            name: subserv
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: subserv.${INFRA_UUID}
        spec:
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                name: subserv
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                command:
                - /opt/app-root/src/bin/launch_node.sh
                - /opt/app-root/src/bin/subserv.js
                image: rh-amqmaas-1/amqmaas10-agent-openshift:dev
                livenessProbe:
                  initialDelaySeconds: 60
                  tcpSocket:
                    port: amqp
                name: subserv
                ports:
                - containerPort: 5672
                  name: amqp
                  protocol: TCP
                resources:
                  limits:
                    memory: 128Mi
                  requests:
                    memory: 128Mi
                volumeMounts:
                - mountPath: /etc/enmasse-certs
                  name: subserv-internal-cert
                  readOnly: true
              volumes:
              - name: subserv-internal-cert
                secret:
                  secretName: subserv-internal-cert.${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/service-port.mqtt: 1883
            enmasse.io/service-port.mqtts: 8883
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: mqtt-${INFRA_UUID}
        spec:
          ports:
          - name: mqtt
            port: 1883
            protocol: TCP
            targetPort: 1883
          - name: secure-mqtt
            port: 8883
            protocol: TCP
            targetPort: 8883
          selector:
            name: mqtt-gateway
            infraUuid: ${INFRA_UUID}
          type: ClusterIP
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            name: mqtt-gateway
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: mqtt-gateway.${INFRA_UUID}
        spec:
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                name: mqtt-gateway
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT
                  value: 5672
                - name: ENMASSE_MQTT_SSL
                  value: 'true'
                - name: ENMASSE_MQTT_KEYFILE
                  value: /etc/mqtt-gateway/ssl/tls.key
                - name: ENMASSE_MQTT_CERTFILE
                  value: /etc/mqtt-gateway/ssl/tls.crt
                - name: ENMASSE_MQTT_LISTENPORT
                  value: '8883'
                - name: ENMASSE_MQTT_MAXMESSAGESIZE
                  value: ${MQTT_MAXMESSAGESIZE}
                image: rh-amqmaas-1/amqmaas10-mqtt-gateway-openshift:dev
                livenessProbe:
                  initialDelaySeconds: 60
                  tcpSocket:
                    port: secure-mqtt
                name: mqtt-gateway-tls
                ports:
                - containerPort: 8883
                  name: secure-mqtt
                  protocol: TCP
                volumeMounts:
                - mountPath: /etc/mqtt-gateway/ssl
                  name: ssl-certs
                  readOnly: true
              - image: rh-amqmaas-1/amqmaas10-mqtt-gateway-openshift:dev
                env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT
                  value: 5672
                livenessProbe:
                  initialDelaySeconds: 60
                  tcpSocket:
                    port: mqtt
                name: mqtt-gateway
                ports:
                - containerPort: 1883
                  name: mqtt
                  protocol: TCP
              volumes:
              - name: ssl-certs
                secret:
                  secretName: ${MQTT_SECRET}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: mqtt-lwt-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            name: mqtt-lwt
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: mqtt-lwt.${INFRA_UUID}
        spec:
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
              labels:
                app: enmasse
                name: mqtt-lwt
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_NORMAL_PORT
                  value: 55671
                - name: MESSAGING_SERVICE_ROUTE_CONTAINER_PORT
                  value: 56671
                image: rh-amqmaas-1/amqmaas10-mqtt-lwt-openshift:dev
                name: mqtt-lwt
                volumeMounts:
                - mountPath: /etc/enmasse-certs
                  name: mqtt-lwt-internal-cert
                  readOnly: true
              volumes:
              - name: mqtt-lwt-internal-cert
                secret:
                  secretName: mqtt-lwt-internal-cert.${INFRA_UUID}
      parameters:
      - name: INFRA_UUID
        description: UUID to use for infrastructure
        required: true
      - name: ADDRESS_SPACE_PLAN
        description: Name of address space plan followed
        required: true
      - description: The link capacity setting for router
        name: ROUTER_LINK_CAPACITY
        value: '250'
      - description: The hostname to use for the exposed route for messaging
        name: MESSAGING_HOSTNAME
      - description: The hostname to use for the exposed route for MQTT
        name: MQTT_GATEWAY_HOSTNAME
      - description: The hostname to use for the exposed route for the messaging console
        name: CONSOLE_HOSTNAME
      - description: The secret with cert for the console
        name: CONSOLE_SECRET
        required: true
      - description: The secret with cert for the messaging service
        name: MESSAGING_SECRET
        required: true
      - description: The secret to mount for MQTT private key and certificate
        name: MQTT_SECRET
        required: true
      - description: The name of our address space
        name: ADDRESS_SPACE
        required: true
      - description: The namespace of our address space
        name: ADDRESS_SPACE_NAMESPACE
        required: true
      - description: The hostname of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_HOST
        required: true
      - description: The port of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_PORT
        required: true
      - description: The CA cert to use for validating authentication service cert
        name: AUTHENTICATION_SERVICE_CA_CERT
        required: true
      - description: The client cert to use as identity against authentication service
        name: AUTHENTICATION_SERVICE_CLIENT_SECRET
      - description: The hostname to use in sasl init
        name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
      - description: The URL to use for OAUTH (if not set, OAUTH is not used)
        name: AUTHENTICATION_SERVICE_OAUTH_URL
      - description: Name of Keycloak Identification Provider Hint
        name: AUTHENTICATION_SERVICE_KC_IDP_HINT
      - description: Enable logging of kubernetes events
        name: ENABLE_EVENT_LOGGER
        value: 'false'
      - description: Interval (in seconds) to use between controller resync
        name: CONTROLLER_RESYNC_INTERVAL
        value: '600'
      - description: Interval (in seconds) to use between status checks
        name: CONTROLLER_CHECK_INTERVAL
        value: '30'
      - description: Max number of events queued up for controller
        name: CONTROLLER_EVENT_QUEUE_SIZE
        value: '10000'
      - description: The service account with address space admin privileges
        name: ADDRESS_SPACE_ADMIN_SA
        required: true
      - description: Maximum message size allowed by the MQTT Gateway
        name: MQTT_MAXMESSAGESIZE
        value: '131072'
    brokered-space-infra.yaml: |-
      apiVersion: v1
      kind: Template
      metadata:
        labels:
          app: enmasse
        name: brokered-space-infra
      objects:
      - apiVersion: v1
        data:
          tls.crt: ${AUTHENTICATION_SERVICE_CA_CERT}
        kind: Secret
        metadata:
          name: authservice-ca.${INFRA_UUID}
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: broker-data.${INFRA_UUID}
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: ${STORAGE_CAPACITY}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: broker-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            role: broker
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: broker.${INFRA_UUID}
        spec:
          replicas: 1
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
                prometheus.io/path: /metrics
                prometheus.io/port: '8080'
                prometheus.io/scrape: 'true'
              labels:
                app: enmasse
                name: broker
                role: broker
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ADDRESS_SPACE_TYPE
                  value: brokered
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: GLOBAL_MAX_SIZE
                  value: ${GLOBAL_MAX_SIZE}
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                image: rh-amqmaas-1/amqmaas10-broker-openshift:dev
                livenessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 120
                name: broker
                ports:
                - containerPort: 5672
                  name: amqp
                - containerPort: 5671
                  name: amqps
                - containerPort: 55671
                  name: amqps-normal
                - containerPort: 8161
                  name: jolokia
                - containerPort: 8080
                  name: artemismetrics
                readinessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 10
                resources:
                  limits:
                    memory: ${BROKER_MEMORY_LIMIT}
                  requests:
                    memory: ${BROKER_MEMORY_LIMIT}
                volumeMounts:
                - mountPath: /var/run/artemis
                  name: data
                  readOnly: false
                - mountPath: /etc/enmasse-certs
                  name: broker-internal-cert
                  readOnly: true
                - mountPath: /etc/external-certs
                  name: external-cert
                  readOnly: true
                - mountPath: /etc/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/prometheus-config
                  name: broker-prometheus-config
                  readOnly: true
              volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: broker-data.${INFRA_UUID}
              - name: broker-prometheus-config
                configMap:
                  name: broker-prometheus-config
              - name: broker-internal-cert
                secret:
                  secretName: broker-internal-cert.${INFRA_UUID}
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: external-cert
                secret:
                  secretName: ${MESSAGING_SECRET}
      - apiVersion: v1
        kind: Service
        metadata:
          labels:
            app: enmasse
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: broker-${INFRA_UUID}
        spec:
          ports:
          - name: amqps-normal
            port: 55671
            targetPort: amqps-normal
          selector:
            role: broker
            infraUuid: ${INFRA_UUID}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
          labels:
            app: enmasse
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: messaging-${INFRA_UUID}
        spec:
          ports:
          - name: amqp
            port: 5672
            targetPort: amqp
          - name: amqps
            port: 5671
            targetPort: amqps
          selector:
            role: broker
            infraUuid: ${INFRA_UUID}
      - apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            enmasse.io/cert-secret: agent-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            role: agent
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: agent.${INFRA_UUID}
        spec:
          replicas: 1
          strategy:
            type: Recreate
          template:
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
                namespace: ${ADDRESS_SPACE_NAMESPACE}
              labels:
                app: enmasse
                name: agent
                role: agent
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: BROKER_SERVICE_HOST
                  value: broker-${INFRA_UUID}
                - name: BROKER_SERVICE_PORT
                  value: 55671
                - name: ADDRESS_SPACE_PLAN
                  value: ${ADDRESS_SPACE_PLAN}
                - name: ADDRESS_SPACE
                  value: ${ADDRESS_SPACE}
                - name: ADDRESS_SPACE_NAMESPACE
                  value: ${ADDRESS_SPACE_NAMESPACE}
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: ENABLE_EVENT_LOGGER
                  value: ${ENABLE_EVENT_LOGGER}
                - name: ADDRESS_SPACE_TYPE
                  value: brokered
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: CONSOLE_CERT_DIR
                  value: /etc/console-certs
                - name: MESSAGING_CERT
                  value: /opt/agent/messaging-cert/tls.crt
                - name: PROBE_PORT
                  value: '8088'
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                - name: AUTHENTICATION_SERVICE_KC_IDP_HINT
                  value: ${AUTHENTICATION_SERVICE_KC_IDP_HINT}
                image: rh-amqmaas-1/amqmaas10-agent-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                name: agent
                ports:
                - containerPort: 8080
                  name: https
                - containerPort: 8088
                  name: http
                readinessProbe:
                  httpGet:
                    path: /probe
                    port: http
                    scheme: HTTP
                volumeMounts:
                - mountPath: /opt/agent/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/console-certs
                  name: console-external-cert
                  readOnly: true
                - mountPath: /etc/enmasse-certs
                  name: agent-internal-cert
                  readOnly: true
                - mountPath: /opt/agent/messaging-cert
                  name: messaging-cert
                  readOnly: true
              serviceAccount: ${ADDRESS_SPACE_ADMIN_SA}
              volumes:
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: console-external-cert
                secret:
                  secretName: ${CONSOLE_SECRET}
              - name: agent-internal-cert
                secret:
                  secretName: agent-internal-cert.${INFRA_UUID}
              - name: messaging-cert
                secret:
                  secretName: ${MESSAGING_SECRET}
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            namespace: ${ADDRESS_SPACE_NAMESPACE}
          labels:
            app: enmasse
            infraType: brokered
            infraUuid: ${INFRA_UUID}
          name: console-${INFRA_UUID}
        spec:
          ports:
          - name: https
            port: 8081
            targetPort: 8080
          selector:
            role: agent
            infraUuid: ${INFRA_UUID}
  
      parameters:
      - name: INFRA_UUID
        description: UUID to use for infrastructure
        required: true
      - description: Storage capacity required for volume claims
        name: STORAGE_CAPACITY
        value: 2Gi
      - description: The name of our address space
        name: ADDRESS_SPACE
        required: true
      - description: The namespace of our address space
        name: ADDRESS_SPACE_NAMESPACE
        required: true
      - name: ADDRESS_SPACE_PLAN
        description: Name of address space plan followed
        required: true
      - description: Certificate to be used for public messaging service
        name: MESSAGING_SECRET
        required: true
      - description: Certificate to be used for public console service
        name: CONSOLE_SECRET
        required: true
      - description: The hostname of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_HOST
        required: true
      - description: The port of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_PORT
        required: true
      - description: The CA cert to use for validating authentication service cert
        name: AUTHENTICATION_SERVICE_CA_CERT
        required: true
      - description: The client cert to use as identity against authentication service
        name: AUTHENTICATION_SERVICE_CLIENT_SECRET
      - description: The hostname to use in sasl init
        name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
      - description: The URL to use for OAUTH (if not set, OAUTH is not used)
        name: AUTHENTICATION_SERVICE_OAUTH_URL
      - description: Name of Keycloak Identification Provider Hint
        name: AUTHENTICATION_SERVICE_KC_IDP_HINT
      - description: Enable logging of kubernetes events
        name: ENABLE_EVENT_LOGGER
        value: 'false'
      - description: The service account with address space admin privileges
        name: ADDRESS_SPACE_ADMIN_SA
        required: true
      - description: Memory limits for container
        name: BROKER_MEMORY_LIMIT
        value: 512Mi
      - description: Global max size for all addresses in broker. Cannot be larger than
          a quarter of BROKER_MEMORY_LIMIT
        name: GLOBAL_MAX_SIZE
        value: -1
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: address-space-controller
    labels:
      app: enmasse
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-brokered-queue
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "brokered-queue"
        },
        "displayName": "Brokered Queue",
        "displayOrder": 0,
        "shortDescription": "Creates a queue on a broker.",
        "longDescription": "Creates a queue on a broker.",
        "uuid": "69f82df8-0501-11e8-a0a8-507b9def37d9",
        "addressType": "queue",
        "requiredResources": [
          {
            "name": "broker",
            "credit": 0.0
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-brokered-topic
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "brokered-topic"
        },
        "displayName": "Brokered Topic",
        "displayOrder": 0,
        "shortDescription": "Creates a topic on a broker.",
        "longDescription": "Creates a topic on a broker.",
        "uuid": "a991e6fc-0501-11e8-8230-507b9def37d9",
        "addressType": "topic",
        "requiredResources": [
          {
            "name": "broker",
            "credit": 0.0
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-pooled-queue
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "pooled-queue"
        },
        "displayName": "Pooled Queue",
        "displayOrder": 0,
        "shortDescription": "Creates a queue on a pooled broker.",
        "longDescription": "Creates a queue on a pooled broker shared with other queues.",
        "uuid": "0843743a-0503-11e8-91df-507b9def37d9",
        "addressType": "queue",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          },
          {
            "name": "broker",
            "credit": 0.01
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-pooled-topic
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "pooled-topic"
        },
        "displayName": "Pooled Topic",
        "displayOrder": 0,
        "shortDescription": "Creates a topic on a shared broker.",
        "longDescription": "Creates a topic on a shared broker with other topics.",
        "uuid": "45e0bc24-155e-11e8-8962-507b9def37d9",
        "addressType": "topic",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          },
          {
            "name": "broker",
            "credit": 0.01
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-sharded-queue
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "sharded-queue"
        },
        "displayName": "Sharded Queue",
        "displayOrder": 0,
        "shortDescription": "Creates a queue on a standalone broker.",
        "longDescription": "Creates a queue on a standalone broker that can be sharded.",
        "uuid": "aeddd606-0502-11e8-ad75-507b9def37d9",
        "addressType": "queue",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          },
          {
            "name": "broker",
            "credit": 1.0
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-sharded-topic
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "sharded-topic"
        },
        "displayName": "Sharded Topic",
        "displayOrder": 0,
        "shortDescription": "Creates a topic on a standalone broker.",
        "longDescription": "Creates a topic on a standalone broker that can be sharded.",
        "uuid": "de256d34-0502-11e8-98c9-507b9def37d9",
        "addressType": "topic",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          },
          {
            "name": "broker",
            "credit": 1.0
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-standard-anycast
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "standard-anycast"
        },
        "displayName": "Standard",
        "displayOrder": 0,
        "shortDescription": "Creates a direct anycast address.",
        "longDescription": "Creates a direct anycast address where messages go via a router that does not take ownership of the messages.",
        "uuid": "45edd942-0503-11e8-84ce-507b9def37d9",
        "addressType": "anycast",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-standard-multicast
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "standard-multicast"
        },
        "displayName": "Standard",
        "displayOrder": 0,
        "shortDescription": "Creates a direct multicast address.",
        "longDescription": "Creates a direct multicast address where messages go via a router that does not take ownership of the messages.",
        "uuid": "60fc2702-0503-11e8-b60e-507b9def37d9",
        "addressType": "multicast",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-plan-standard-subscription
    labels:
      type: address-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressPlan",
        "metadata": {
          "name": "standard-subscription"
        },
        "displayName": "Topic Subscription",
        "displayOrder": 0,
        "shortDescription": "Creates a durable subscription on a topic.",
        "longDescription": "Creates a durable subscription on a topic, which is then accessed as a distinct address.",
        "uuid": "146ee531-2999-4015-85b9-a32931d7bcc5",
        "addressType": "subscription",
        "requiredResources": [
          {
            "name": "router",
            "credit": 0.01
          },
          {
            "name": "broker",
            "credit": 0.01
          }
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-space-plan-brokered
    labels:
      type: address-space-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressSpacePlan",
        "metadata": {
          "name": "unlimited-brokered",
          "annotations": {
            "enmasse.io/defined-by": "brokered-space"
          }
        },
        "displayName": "Unlimited",
        "displayOrder": 0,
        "shortDescription": "Unlimited plan without resource restrictions.",
        "longDescription": "Unlimited plan where you can create an infinite number of queues until the system falls over.",
        "uuid": "5d5acf5c-0500-11e8-ab55-507b9def37d9",
        "addressSpaceType": "brokered",
        "resources": [
          {
            "name": "broker",
            "min": 1.0,
            "max": 1.9 
          }
        ],
        "addressPlans": [
          "brokered-queue",
          "brokered-topic"
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-space-plan-standard-mqtt
    labels:
      type: address-space-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressSpacePlan",
        "metadata": {
          "name": "unlimited-standard-without-mqtt",
          "annotations": {
            "enmasse.io/defined-by": "standard-space-without-mqtt"
          }
        },
        "displayName": "Unlimited",
        "displayOrder": 0,
        "shortDescription": "Unlimited plan without resource restrictions.",
        "longDescription": "Unlimited plan where you can create an large number of addresses until the system (probably) falls over.",
        "uuid": "f084d7f4-0501-11e8-a572-507b9def37d9",
        "addressSpaceType": "standard",
        "resources": [
          {
            "name": "router",
            "min": 1.0,
            "max": 10000.0
          },
          {
            "name": "broker",
            "min": 1.0,
            "max": 10000.0
          },
          {
            "name": "aggregate",
            "min": 1.0,
            "max": 10000.0
          }
        ],
        "addressPlans": [
          "standard-anycast",
          "standard-multicast",
          "sharded-queue",
          "pooled-queue",
          "sharded-topic",
          "pooled-topic",
          "standard-subscription"
        ]
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: address-space-plan-standard
    labels:
      type: address-space-plan
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "AddressSpacePlan",
        "metadata": {
          "name": "unlimited-standard",
          "annotations": {
            "enmasse.io/defined-by": "standard-space"
          }
        },
        "displayName": "Unlimited",
        "displayOrder": 0,
        "shortDescription": "Unlimited plan without resource restrictions.",
        "longDescription": "Unlimited plan where you can create an large number of addresses until the system (probably) falls over.",
        "uuid": "f084d7f4-0501-11e8-a572-507b9def37d9",
        "addressSpaceType": "standard",
        "resources": [
          {
            "name": "router",
            "min": 1.0,
            "max": 10000.0
          },
          {
            "name": "broker",
            "min": 1.0,
            "max": 10000.0
          },
          {
            "name": "aggregate",
            "min": 1.0,
            "max": 10000.0
          }
        ],
        "addressPlans": [
          "standard-anycast",
          "standard-multicast",
          "sharded-queue",
          "pooled-queue",
          "sharded-topic",
          "pooled-topic",
          "standard-subscription"
        ]
      }
- apiVersion: v1
  data:
    config.yaml: '{"hostPort": "127.0.0.1:1099", "rules": [{"labels": {"broker":
      "$1"}, "name": "artemis_connection_count", "pattern": "org.apache.activemq.artemis<broker=\"(.+)\"><>ConnectionCount",
      "type": "GAUGE"}, {"labels": {"address": "$2", "broker": "$1"}, "name": "artemis_consumer_count",
      "pattern": "org.apache.activemq.artemis<broker=\"(.+)\", component=addresses,
      address=\"(.+)\".*><>ConsumerCount", "type": "GAUGE"}, {"labels": {"address":
      "$2", "broker": "$1"}, "name": "artemis_message_count", "pattern": "org.apache.activemq.artemis<broker=\"(.+)\",
      component=addresses, address=\"(.+)\".*><>MessageCount", "type": "GAUGE"}],
      "ssl": true}'
  kind: ConfigMap
  metadata:
    labels:
      app: enmasse
    name: broker-prometheus-config
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-broker-topic
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "broker-topic"
        },
        "template": "topic-persisted"
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-broker
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "broker"
        },
        "template": "queue-persisted"
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-brokered
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "brokered-space"
        },
        "template": "brokered-space-infra"
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-router
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "router"
        }
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-standard-mqtt
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "standard-space-without-mqtt"
        },
        "template": "standard-space-infra-without-mqtt"
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: resource-definition-standard
    labels:
      type: resource-definition
      app: enmasse
  data:
    definition: |-
      {
        "apiVersion": "enmasse.io/v1",
        "kind": "ResourceDefinition",
        "metadata": {
          "name": "standard-space"
        },
        "template": "standard-space-infra"
      }
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: enmasse
    name: standard-broker-definitions
  data:
    queue-persisted.yaml: |-
      apiVersion: v1
      kind: Template
      metadata:
        labels:
          app: enmasse
        name: queue-persisted
      objects:
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ${NAME}
        spec:
          clusterIP: None
          selector:
            name: ${NAME}
            role: broker
            infraUuid: ${INFRA_UUID}
      - apiVersion: apps/v1beta1
        kind: StatefulSet
        metadata:
          annotations:
            address: ${ADDRESS}
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
            enmasse.io/cert-cn: broker.${INFRA_UUID}
            enmasse.io/cert-secret: broker-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ${NAME}
        spec:
          replicas: 1
          serviceName: ${NAME}
          template:
            metadata:
              annotations:
                address: ${ADDRESS}
                addressSpace: ${ADDRESS_SPACE}
                cluster_id: ${CLUSTER_ID}
                prometheus.io/path: /metrics
                prometheus.io/port: '8080'
                prometheus.io/scrape: 'true'
              labels:
                addresstype: queue
                app: enmasse
                name: ${NAME}
                role: broker
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: QUEUE_SCHEDULER_SERVICE_HOST
                  value: queue-scheduler-${INFRA_UUID}
                - name: QUEUE_SCHEDULER_SERVICE_PORT
                  value: 5672
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: QUEUE_NAME
                  value: ${ADDRESS}
                - name: CLUSTER_ID
                  value: ${CLUSTER_ID}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: GLOBAL_MAX_SIZE
                  value: ${GLOBAL_MAX_SIZE}
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                image: rh-amqmaas-1/amqmaas10-broker-openshift:dev
                lifecycle:
                  preStop:
                    exec:
                      command:
                      - /shutdown-hook/shutdown-hook.sh
                livenessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 120
                name: broker
                ports:
                - containerPort: 5673
                  name: amqp
                - containerPort: 8161
                  name: jolokia
                - containerPort: 8080
                  name: artemismetrics
                readinessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 10
                resources:
                  limits:
                    memory: ${BROKER_MEMORY_LIMIT}
                  requests:
                    memory: ${BROKER_MEMORY_LIMIT}
                volumeMounts:
                - mountPath: /var/run/artemis
                  name: data
                  readOnly: false
                - mountPath: /etc/enmasse-certs
                  name: broker-internal-cert
                  readOnly: true
                - mountPath: /etc/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/prometheus-config
                  name: broker-prometheus-config
                  readOnly: true
              volumes:
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: broker-internal-cert
                secret:
                  secretName: broker-internal-cert.${INFRA_UUID}
              - configMap:
                  name: broker-prometheus-config
                name: broker-prometheus-config
          volumeClaimTemplates:
          - apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
                cluster_id: ${CLUSTER_ID}
              labels:
                app: enmasse
                infraType: standard
                infraUuid: ${INFRA_UUID}
              name: data
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: ${STORAGE_CAPACITY}
      parameters:
      - name: INFRA_UUID
        description: UUID to use for infrastructure
        required: true
      - description: Storage capacity required for volume claims
        name: STORAGE_CAPACITY
        value: 2Gi
      - description: The link capacity setting for router
        name: ROUTER_LINK_CAPACITY
        value: '250'
      - description: A valid addressSpace name for the address Space
        name: ADDRESS_SPACE
        required: true
      - description: A valid name for the deployment
        name: NAME
        required: true
      - description: A valid group id for the deployment
        name: CLUSTER_ID
        required: true
      - description: The address to use for the queue
        name: ADDRESS
        value: ''
      - description: The hostname of the authentication service used by this address
          space
        name: AUTHENTICATION_SERVICE_HOST
        required: true
      - description: The port of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_PORT
        required: true
      - description: The secret to use for validating authentication service cert
        name: AUTHENTICATION_SERVICE_CA_SECRET
        required: true
      - description: The client cert to use as identity against authentication service
        name: AUTHENTICATION_SERVICE_CLIENT_SECRET
      - description: The hostname to use in sasl init
        name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
      - description: Memory limits for container
        name: BROKER_MEMORY_LIMIT
        value: 512Mi
      - description: Global max size for all addresses in broker. Cannot be larger than
          a quarter of BROKER_MEMORY_LIMIT
        name: GLOBAL_MAX_SIZE
        value: -1
    topic-persisted.yaml: |-
      apiVersion: v1
      kind: Template
      metadata:
        labels:
          app: enmasse
        name: topic-persisted
      objects:
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ${NAME}
        spec:
          clusterIP: None
          selector:
            name: ${NAME}
            role: broker
            infraType: standard
            infraUuid: ${INFRA_UUID}
      - apiVersion: apps/v1beta1
        kind: StatefulSet
        metadata:
          annotations:
            address: ${ADDRESS}
            addressSpace: ${ADDRESS_SPACE}
            cluster_id: ${CLUSTER_ID}
            enmasse.io/cert-cn: broker.${INFRA_UUID}
            enmasse.io/cert-secret: broker-internal-cert.${INFRA_UUID}
          labels:
            app: enmasse
            infraType: standard
            infraUuid: ${INFRA_UUID}
          name: ${NAME}
        spec:
          replicas: 1
          serviceName: ${NAME}
          template:
            metadata:
              annotations:
                address: ${ADDRESS}
                addressSpace: ${ADDRESS_SPACE}
                cluster_id: ${CLUSTER_ID}
                prometheus.io/path: /metrics
                prometheus.io/port: '8080'
                prometheus.io/scrape: 'true'
              labels:
                addresstype: topic
                app: enmasse
                name: ${NAME}
                role: broker
                infraType: standard
                infraUuid: ${INFRA_UUID}
            spec:
              containers:
              - env:
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: MESSAGING_SERVICE_HOST
                  value: messaging-${INFRA_UUID}
                - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
                  value: 56671
                - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
                  value: 55671
                - name: QUEUE_SCHEDULER_SERVICE_HOST
                  value: queue-scheduler-${INFRA_UUID}
                - name: QUEUE_SCHEDULER_SERVICE_PORT
                  value: 5672
                - name: TOPIC_NAME
                  value: ${ADDRESS}
                - name: CLUSTER_ID
                  value: ${CLUSTER_ID}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                - name: GLOBAL_MAX_SIZE
                  value: ${GLOBAL_MAX_SIZE}
                - name: AUTHENTICATION_SERVICE_HOST
                  value: ${AUTHENTICATION_SERVICE_HOST}
                - name: AUTHENTICATION_SERVICE_PORT
                  value: ${AUTHENTICATION_SERVICE_PORT}
                - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
                  value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
                - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
                  value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
                - name: AUTHENTICATION_SERVICE_OAUTH_URL
                  value: ${AUTHENTICATION_SERVICE_OAUTH_URL}
                image: rh-amqmaas-1/amqmaas10-broker-openshift:dev
                lifecycle:
                  preStop:
                    exec:
                      command:
                      - /shutdown-hook/shutdown-hook.sh
                livenessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 120
                name: broker
                ports:
                - containerPort: 5673
                  name: amqp
                - containerPort: 8161
                  name: jolokia
                - containerPort: 8080
                  name: artemismetrics
                readinessProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - $ARTEMIS_HOME/bin/probe.sh
                  initialDelaySeconds: 10
                resources:
                  limits:
                    memory: ${BROKER_MEMORY_LIMIT}
                  requests:
                    memory: ${BROKER_MEMORY_LIMIT}
                volumeMounts:
                - mountPath: /var/run/artemis
                  name: data
                  readOnly: false
                - mountPath: /etc/enmasse-certs
                  name: broker-internal-cert
                  readOnly: true
                - mountPath: /etc/authservice-ca
                  name: authservice-ca
                  readOnly: true
                - mountPath: /etc/prometheus-config
                  name: broker-prometheus-config
                  readOnly: true
              - env:
                - name: INFRA_UUID
                  value: ${INFRA_UUID}
                - name: TOPIC_NAME
                  value: ${ADDRESS}
                - name: CLUSTER_ID
                  value: ${NAME}
                - name: CERT_DIR
                  value: /etc/enmasse-certs
                image: rh-amqmaas-1/amqmaas10-topic-forwarder-openshift:dev
                livenessProbe:
                  httpGet:
                    path: /health
                    port: health
                  initialDelaySeconds: 60
                name: forwarder
                ports:
                - containerPort: 8088
                  name: health
                resources:
                  limits:
                    memory: 128Mi
                  requests:
                    memory: 128Mi
                volumeMounts:
                - mountPath: /etc/enmasse-certs
                  name: broker-internal-cert
                  readOnly: true
              volumes:
              - name: authservice-ca
                secret:
                  secretName: authservice-ca.${INFRA_UUID}
              - name: broker-internal-cert
                secret:
                  secretName: broker-internal-cert.${INFRA_UUID}
              - configMap:
                  name: broker-prometheus-config
                name: broker-prometheus-config
          volumeClaimTemplates:
          - apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              annotations:
                addressSpace: ${ADDRESS_SPACE}
                cluster_id: ${CLUSTER_ID}
              labels:
                app: enmasse
                infraType: standard
                infraUuid: ${INFRA_UUID}
              name: data
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: ${STORAGE_CAPACITY}
      parameters:
      - name: INFRA_UUID
        description: UUID to use for infrastructure
        required: true
      - description: Storage capacity required for volume claims
        name: STORAGE_CAPACITY
        value: 2Gi
      - description: The link capacity setting for router
        name: ROUTER_LINK_CAPACITY
        value: '250'
      - description: A valid addressSpace name for the address Space
        name: ADDRESS_SPACE
        required: true
      - description: A valid name for the deployment
        name: NAME
        required: true
      - description: A valid group id for the deployment
        name: CLUSTER_ID
        required: true
      - description: The address to use for the topic
        name: ADDRESS
        value: ''
      - description: The hostname of the authentication service used by this address
          space
        name: AUTHENTICATION_SERVICE_HOST
        required: true
      - description: The port of the authentication service used by this address space
        name: AUTHENTICATION_SERVICE_PORT
        required: true
      - description: The secret to use for validating authentication service cert
        name: AUTHENTICATION_SERVICE_CA_SECRET
        required: true
      - description: The client cert to use as identity against authentication service
        name: AUTHENTICATION_SERVICE_CLIENT_SECRET
      - description: The hostname to use in sasl init
        name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
      - description: Memory limits for container
        name: BROKER_MEMORY_LIMIT
        value: 512Mi
      - description: Global max size for all addresses in broker. Cannot be larger than
          a quarter of BROKER_MEMORY_LIMIT
        name: GLOBAL_MAX_SIZE
        value: -1
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: adress-space-controller-admin
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: admin
  subjects:
  - kind: ServiceAccount
    name: address-space-controller
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: default-view
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: ${NAMESPACE}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: address-space-controller
    name: address-space-controller
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: enmasse
          name: address-space-controller
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -verbose:gc
          - name: STANDARD_AUTHSERVICE_CONFIG_NAME
            value: keycloak-config
          - name: STANDARD_AUTHSERVICE_CERT_SECRET_NAME
            value: standard-authservice-cert
          - name: ENABLE_EVENT_LOGGER
            valueFrom:
              configMapKeyRef:
                key: enableEventLogger
                name: address-space-controller-config
                optional: true
          - name: EXPOSE_ENDPOINTS_BY_DEFAULT
            valueFrom:
              configMapKeyRef:
                key: exposeEndpointsByDefault
                name: address-space-controller-config
                optional: true
          - name: ENVIRONMENT
            valueFrom:
              configMapKeyRef:
                key: environment
                name: address-space-controller-config
                optional: true
          - name: TEMPLATE_DIR
            value: /address-space-definitions
          - name: STANDARD_AUTHSERVICE_CONFIG
            value: keycloak-config
          - name: WILDCARD_ENDPOINT_CERT_SECRET
            valueFrom:
              configMapKeyRef:
                key: wildcardEndpointCertSecret
                name: address-space-controller-config
                optional: true
          - name: RESYNC_INTERVAL
            valueFrom:
              configMapKeyRef:
                key: resyncInterval
                name: address-space-controller-config
                optional: true
          - name: RECHECK_INTERVAL
            valueFrom:
              configMapKeyRef:
                key: recheckInterval
                name: address-space-controller-config
                optional: true
          image: rh-amqmaas-1/amqmaas10-address-space-controller-openshift:dev
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          name: address-space-controller
          ports:
          - containerPort: 8080
            name: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 128Mi
          volumeMounts:
          - mountPath: /address-space-definitions
            name: address-space-definitions
            readOnly: true
        serviceAccount: address-space-controller
        volumes:
        - configMap:
            name: address-space-definitions
          name: address-space-definitions
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: api-server
    labels:
      app: enmasse
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    labels:
      app: enmasse
    name: enmasse.io:api-server
  rules:
    - apiGroups: [ "enmasse.io" ]
      resources: [ "addresses", "addressspaces" ]
      verbs: [ "create", "get", "update", "delete", "list", "watch", "patch" ]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "enmasse.io:api-server-auth-delegator-${NAMESPACE}"
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: api-server
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "enmasse.io:api-server-${NAMESPACE}"
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: enmasse.io:api-server
  subjects:
  - kind: ServiceAccount
    name: api-server
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: "enmasse.io:apiserver-edit"
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: api-server
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    name: api-server
    labels:
      app: enmasse
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: api-server-cert
  spec:
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      component: api-server
    type: ClusterIP
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      component: api-server
    name: api-server
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          component: api-server
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -verbose:gc
          - name: CERT_DIR
            value: /api-server-cert
          - name: ENABLE_RBAC
            valueFrom:
              configMapKeyRef:
                key: enableRbac
                name: api-server-config
                optional: true
          - name: APISERVER_CLIENT_CA_CONFIG_NAME
            value: extension-apiserver-authentication
          - name: APISERVER_CLIENT_CA_CONFIG_NAMESPACE
            value: kube-system
          - name: APISERVER_ROUTE_NAME
            value: restapi
          - name: STANDARD_AUTHSERVICE_CONFIG_NAME
            value: keycloak-config
          - name: STANDARD_AUTHSERVICE_CREDENTIALS_SECRET_NAME
            value: keycloak-credentials
          - name: STANDARD_AUTHSERVICE_CERT_SECRET_NAME
            value: standard-authservice-cert
          image: rh-amqmaas-1/amqmaas10-api-server-openshift:dev
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
          name: api-server
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 8443
            name: https
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          resources:
            limits:
              memory: 512Mi
            requests:
              memory: 512Mi
          volumeMounts:
          - mountPath: /api-server-cert
            name: api-server-cert
            readOnly: true
        serviceAccount: api-server
        volumes:
        - name: api-server-cert
          secret:
            secretName: api-server-cert
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: "enmasse.io:apiserver-authentication-reader"
    namespace: kube-system
    labels:
      app: enmasse
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - kind: ServiceAccount
    name: api-server
    namespace: ${NAMESPACE}
- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    labels:
      app: enmasse
    name: v1alpha1.enmasse.io
  spec:
    group: enmasse.io
    groupPriorityMinimum: 1000
    insecureSkipTLSVerify: true
    service:
      name: api-server
      namespace: ${NAMESPACE}
    version: v1alpha1
    versionPriority: 15
- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    labels:
      app: enmasse
    name: v1alpha1.user.enmasse.io
  spec:
    group: user.enmasse.io
    groupPriorityMinimum: 1000
    insecureSkipTLSVerify: true
    service:
      name: api-server
      namespace: ${NAMESPACE}
    version: v1alpha1
    versionPriority: 15
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: none-authservice-cert
    name: none-authservice
  spec:
    ports:
    - name: amqps
      port: 5671
      protocol: TCP
      targetPort: amqps
    selector:
      name: none-authservice
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
    name: none-authservice
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: none-authservice
      spec:
        containers:
        - env:
          - name: LISTENPORT
            value: '5671'
          image: rh-amqmaas-1/amqmaas10-none-auth-openshift:dev
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: amqps
          name: none-authservice
          ports:
          - containerPort: 5671
            name: amqps
          resources:
            limits:
              memory: 48Mi
            requests:
              memory: 48Mi
          volumeMounts:
          - mountPath: /opt/none-authservice/cert
            name: none-authservice-cert
            readOnly: false
        volumes:
        - name: none-authservice-cert
          secret:
            secretName: none-authservice-cert
- apiVersion: v1
  kind: Template
  metadata:
    name: address-space
    labels:
      app: enmasse
  objects:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: ${ADDRESS_SPACE_NAMESPACE}.${NAME}
        labels:
          type: address-space
          infraUuid: ${INFRA_UUID}
          app: enmasse
      data:
        config.json: |-
          {
            "apiVersion": "enmasse.io/v1",
            "kind": "AddressSpace",
            "metadata": {
              "name": "${NAME}",
              "namespace": "${ADDRESS_SPACE_NAMESPACE}",
              "annotations": {
                "enmasse.io/infra-uuid": "${INFRA_UUID}",
                "enmasse.io/realm-name": "${ADDRESS_SPACE_NAMESPACE}-${NAME}"
              }
            },
            "spec": {
              "type": "${TYPE}",
              "plan": "${PLAN}"
            }
          }
  parameters:
    - name: NAME
      description: Name of address space
      required: true
    - name: ADDRESS_SPACE_NAMESPACE
      description: Namespace AddressSpace belongs to
      required: true
    - name: INFRA_UUID
      description: Infra uuid
      from: '[a-z]{8}'
      generate: expression
    - name: TYPE
      description: Type of address space
      required: true
    - name: PLAN
      description: Plan to use for address space
      required: true
- apiVersion: v1
  kind: Template
  metadata:
    name: address
    labels:
      app: enmasse
  objects:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: ${ADDRESS_SPACE_NAMESPACE}.${ADDRESS_SPACE}.${ADDRESS}
        labels:
          type: address-config
          infraUuid: ${INFRA_UUID}
          app: enmasse
      data:
        config.json: |-
          {
            "apiVersion": "enmasse.io/v1",
            "kind": "Address",
            "metadata": {
              "name": "${ADDRESS_SPACE}.${ADDRESS}",
              "namespace": "${ADDRESS_SPACE_NAMESPACE}"
            },
            "spec": {
              "address": "${ADDRESS}",
              "type": "${TYPE}",
              "plan": "${PLAN}"
            }
          }
  parameters:
    - name: ADDRESS
      description: Address
      required: true
    - name: ADDRESS_SPACE_NAMESPACE
      description: Namespace of address and address space
      required: true
    - name: INFRA_UUID
      description: Infrastructure uuid
      required: true
    - name: ADDRESS_SPACE
      description: Address space of address
      required: true
    - name: TYPE
      description: Type of address
      required: true
    - name: PLAN
      description: Plan to use for address
      required: true
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: enmasse.io:tenant-edit
    labels:
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
  rules:
    - apiGroups: [ "enmasse.io" ]
      resources: [ "addresses", "addressspaces" ]
      verbs: [ "create", "get", "update", "delete", "list", "watch", "patch" ]
    - apiGroups: [ "user.enmasse.io" ]
      resources: [ "messagingusers" ]
      verbs: [ "create", "get", "update", "delete", "list", "watch", "patch" ]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: enmasse.io:tenant-view
    labels:
      rbac.authorization.k8s.io/aggregate-to-view: "true"
  rules:
    - apiGroups: [ "enmasse.io" ]
      resources: [ "addresses", "addressspaces" ]
      verbs: [ "get", "list" ]
    - apiGroups: [ "user.enmasse.io" ]
      resources: [ "messagingusers" ]
      verbs: [ "get", "list" ]
